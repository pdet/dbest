/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TestesConcluidos.java
 *
 * Created on 02/10/2011, 17:52:41
 */
package ui;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.DocumentException;
import java.io.FileNotFoundException;
import java.net.MalformedURLException;
import ui.util.GraficoBarras;
import ui.util.GraficoPizza;
import benchmark.Benchmark;
import fachada.FachadaDeRecuperacaoDeDados;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JInternalFrame;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import ui.excecao.PDFGeradoSucesso;
import ui.util.GerarPDF;

/**
 *
 * @author pedroholanda
 */
public class TestesConcluidos extends JInternalFrame {

    /** Creates new form TestesConcluidos */
    public TestesConcluidos() {
        initComponents();
    }
    ConexaoBanco banco = new ConexaoBanco();
    static Object valor;
    static List dados = new ArrayList();

    /** Creates new form TesteConcluidos */
    public List getDados() {
        return dados;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jResultados = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jConsultas = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPizza = new javax.swing.JButton();
        jBarra = new javax.swing.JButton();
        jGerarPDF = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("dBest - Análise de Resultados");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Resultados", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jResultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID - Teste", "Benchmark", "Tipo", "Ordem", "Número de iteracao", "Data - Hora Início", "Data - Hora Fim", "Duração"
            }
        ));
        DefaultTableModel modelo = (DefaultTableModel) jResultados.getModel();
        FachadaDeRecuperacaoDeDados recupera = new FachadaDeRecuperacaoDeDados();
        ExecutorService threadExecutor = Executors.newCachedThreadPool();
        ArrayList id = new ArrayList();
        ArrayList dados = new ArrayList();
        String nomeBenchmark;
        try {
            id = recupera.getIdDeTodosOsTestes(banco.getSGBD(), banco.getNomeDoBancoResultados(), banco.getIP());

            for (int i = 0; i < id.size(); i++) {
                int aux = (Integer) id.get(i);
                dados = recupera.getDadosDoTeste(aux, banco.getSGBD(), banco.getNomeDoBancoResultados(), banco.getIP());
                String idBenchmarkS = dados.get(0).toString();
                int idBenchmark = (Integer.parseInt(idBenchmarkS));
                nomeBenchmark = recupera.getNomeDoBenchmark(idBenchmark, banco.getSGBD(), banco.getNomeDoBancoResultados(), banco.getIP());
                modelo.addRow(new Object[]{aux, nomeBenchmark, dados.get(1), dados.get(2), dados.get(3),dados.get(4),dados.get(5),dados.get(6)});
            }

        } catch (SQLException ex) {
            Logger.getLogger(ui.TestesConcluidos.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ui.TestesConcluidos.class.getName()).log(Level.SEVERE, null, ex);
        }
        jResultados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jResultadosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jResultados);

        jConsultas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID - Consulta", "Iteração", "Ordem", "Duração", "SQL"
            }
        ));
        jScrollPane2.setViewportView(jConsultas);

        jLabel1.setText("Testes Concluidos");

        jLabel2.setText("Dados do Teste");

        jPizza.setText("Pizza");
        jPizza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPizzaActionPerformed(evt);
            }
        });

        jBarra.setText("Barra");
        jBarra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBarraActionPerformed(evt);
            }
        });

        jGerarPDF.setText("Gerar PDF");
        jGerarPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jGerarPDFActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(254, 254, 254)
                .add(jLabel1)
                .addContainerGap(331, Short.MAX_VALUE))
            .add(jPanel1Layout.createSequentialGroup()
                .add(272, 272, 272)
                .add(jLabel2)
                .addContainerGap(331, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE)
            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(437, Short.MAX_VALUE)
                .add(jPizza)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jBarra)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jGerarPDF)
                .add(2, 2, 2))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 181, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 183, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jPizza)
                    .add(jBarra)
                    .add(jGerarPDF))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 733, Short.MAX_VALUE)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 556, Short.MAX_VALUE)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jResultadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jResultadosMouseClicked
    int selRow = jResultados.getSelectedRow();
    valor = jResultados.getModel().getValueAt(selRow, 0);
    String aux = valor.toString();
    Object benchmark = jResultados.getModel().getValueAt(selRow, 1);
    
    DefaultTableModel modelo_2 = (DefaultTableModel) jConsultas.getModel();
    modelo_2.setNumRows(0);
    FachadaDeRecuperacaoDeDados recupera = new FachadaDeRecuperacaoDeDados();
    ExecutorService threadExecutor = Executors.newCachedThreadPool();
    int j = 0;
    int id = Integer.parseInt(aux);
    int i = 0;
    try {
        try {
            dados = recupera.getDadosDasConsultasDoTeste(id, banco.getSGBD(), banco.getNomeDoBancoResultados(), banco.getIP());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TestesConcluidos.class.getName()).log(Level.SEVERE, null, ex);
        }
        Benchmark bench = banco.getBenchmark();
        ArrayList consultas = bench.getConsultas();
        try {
            HashMap sqlConsultas = recupera.getTextoDasConsultasBenchmark(1, banco.getSGBD(), banco.getNomeDoBancoResultados(), banco.getIP());
            while (i < dados.size() / 4) {
                
                modelo_2.addRow(new Object[]{dados.get(j), dados.get(j + 1), dados.get(j + 2), dados.get(j + 3), sqlConsultas.get(Integer.parseInt(dados.get(j).toString()))});
                i++;
                j = j + 4;
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TestesConcluidos.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    } catch (SQLException ex) {
        Logger.getLogger(TestesConcluidos.class.getName()).log(Level.SEVERE, null, ex);
    }
    
}//GEN-LAST:event_jResultadosMouseClicked
    
private void jPizzaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPizzaActionPerformed
    double duracaoConsulta;
    GraficoPizza j = new GraficoPizza();
    j.setTitle("dBest - Duração Média das Consultas");
    j.setSize(640, 430);
    String nomeConsulta;
    DefaultTableModel modelo = (DefaultTableModel) jConsultas.getModel();
    for (int i = 0; i < modelo.getRowCount(); i++) {
        nomeConsulta = modelo.getValueAt(i, 0).toString();
        duracaoConsulta = Double.parseDouble(modelo.getValueAt(i, 3).toString());
        j.setValue(nomeConsulta, duracaoConsulta);
    }            
    j.setChar("dBest - Duração Média das Consultas");
    j.Show();
    }//GEN-LAST:event_jPizzaActionPerformed
    
private void jBarraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBarraActionPerformed
    String nomeConsulta;
    double duracaoConsulta;
    
    DefaultTableModel modelo = (DefaultTableModel) jConsultas.getModel();
    dados.clear();
    int iteracao = 0;
    for (int i = 0; i < modelo.getRowCount(); i++) {
        nomeConsulta = modelo.getValueAt(i, 0).toString();
        duracaoConsulta = Double.parseDouble(modelo.getValueAt(i, 3).toString());
        iteracao = Integer.parseInt(modelo.getValueAt(i, 1).toString());
        dados.add(nomeConsulta);
        dados.add(duracaoConsulta);        
        dados.add(iteracao);
    }
    GraficoBarras chart = null;
    try {
        chart = new GraficoBarras();
        chart.setDados(dados);
        chart.setGraficoBarras();
    } catch (IOException ex) {
        Logger.getLogger(AcompanhamentoTestes.class.getName()).log(Level.SEVERE, null, ex);
    } catch (ClassNotFoundException ex) {
        Logger.getLogger(AcompanhamentoTestes.class.getName()).log(Level.SEVERE, null, ex);
    }
    chart.pack();
    chart.setVisible(true);
    JFreeChart c = ChartFactory.createBarChart("dBest - Análise Comparativa das Consultas (Barra)", null, null, null, PlotOrientation.HORIZONTAL, true, true, true);
    
    
}//GEN-LAST:event_jBarraActionPerformed
    
private void jGerarPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jGerarPDFActionPerformed
    int selRow = jResultados.getSelectedRow();
    double duracaoConsulta;
    GraficoPizza j = new GraficoPizza();
    j.setTitle("dBest - Duração Média das Consultas");
    j.setSize(640, 430);
    String nomeConsulta;
    DefaultTableModel modelo = (DefaultTableModel) jConsultas.getModel();
    for (int i = 0; i < modelo.getRowCount(); i++) {
        nomeConsulta = modelo.getValueAt(i, 0).toString();
        duracaoConsulta = Double.parseDouble(modelo.getValueAt(i, 3).toString());
        j.setValue(nomeConsulta, duracaoConsulta);
    }
    j.setChar("dBest - Duração Média das Consultas");
    
    dados.clear();
    int iteracao = 0;
    for (int i = 0; i < modelo.getRowCount(); i++) {
        nomeConsulta = modelo.getValueAt(i, 0).toString();
        duracaoConsulta = Double.parseDouble(modelo.getValueAt(i, 3).toString());
        iteracao = Integer.parseInt(modelo.getValueAt(i, 1).toString());
        dados.add(nomeConsulta);
        dados.add(duracaoConsulta);        
        dados.add(iteracao);
    }
    GraficoBarras chart = null;
    try {
        chart = new GraficoBarras();
        chart.setDados(dados);
        chart.setGraficoBarras();
    } catch (IOException ex) {
        Logger.getLogger(AcompanhamentoTestes.class.getName()).log(Level.SEVERE, null, ex);
    } catch (ClassNotFoundException ex) {
        Logger.getLogger(AcompanhamentoTestes.class.getName()).log(Level.SEVERE, null, ex);
    }
    chart.pack();
    JFreeChart c = ChartFactory.createBarChart("dBest - Análise Comparativa das Consultas (Barra)", null, null, null, PlotOrientation.HORIZONTAL, true, true, true);
    try {
        j.gerarImagem();
        chart.gerarImagem();
    } catch (IOException ex) {
        Logger.getLogger(TestesConcluidos.class.getName()).log(Level.SEVERE, null, ex);
    }
    GerarPDF pdf = new GerarPDF();
    try {
        pdf.abrePDF(jConsultas);
        
        pdf.textoDetalhesTeste(jResultados.getModel().getValueAt(selRow, 2).toString(), jResultados.getModel().getValueAt(selRow, 0).toString(), jResultados.getModel().getValueAt(selRow, 7).toString(), jResultados.getModel().getValueAt(selRow, 4).toString(), jResultados.getModel().getValueAt(selRow, 3).toString(), jResultados.getModel().getValueAt(selRow, 1).toString());
        pdf.colocarTabelaConsultas(jConsultas);
        try {
            pdf.colocarGraficos();
            pdf.fechaPDF();
            PDFGeradoSucesso pdfGerado = new PDFGeradoSucesso();
            pdfGerado.setVisible(true);
        } catch (BadElementException ex) {
            Logger.getLogger(TestesConcluidos.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(TestesConcluidos.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(TestesConcluidos.class.getName()).log(Level.SEVERE, null, ex);
        }
    } catch (DocumentException ex) {
        Logger.getLogger(TestesConcluidos.class.getName()).log(Level.SEVERE, null, ex);
    } catch (FileNotFoundException ex) {
        Logger.getLogger(TestesConcluidos.class.getName()).log(Level.SEVERE, null, ex);
    }
    
}//GEN-LAST:event_jGerarPDFActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestesConcluidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestesConcluidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestesConcluidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestesConcluidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            public void run() {
                new TestesConcluidos().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBarra;
    private javax.swing.JTable jConsultas;
    private javax.swing.JButton jGerarPDF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jPizza;
    private javax.swing.JTable jResultados;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
